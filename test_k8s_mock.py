from kubernetes import client, config
import os
import json

def test_k8s_mock():
    print("Testing k8s mock connection...")

    try:
        # kubeconfig„ÇíË™≠„ÅøËæº„Åø
        kubeconfig_path = "./assets/config"
        print(f"Loading kubeconfig from: {kubeconfig_path}")

        if not os.path.exists(kubeconfig_path):
            print(f"‚ùå Kubeconfig file not found: {kubeconfig_path}")
            return False

        config.load_kube_config(config_file=kubeconfig_path)
        print("‚úÖ Kubeconfig loaded successfully")

        # API„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàê
        v1 = client.CoreV1Api()
        print("‚úÖ CoreV1Api client created")

        # k8s mock„Çµ„Éº„Éê„Éº„ÅÆÊÉÖÂ†±„ÇíË°®Á§∫
        try:
            # Ë®≠ÂÆöÊÉÖÂ†±„ÇíÂèñÂæó
            contexts, active_context = config.list_kube_config_contexts(config_file=kubeconfig_path)
            if active_context:
                server_url = active_context.get('context', {}).get('cluster')
                print(f"üì° Connecting to: {server_url}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not get server info: {e}")

        # Êé•Á∂ö„ÉÜ„Çπ„Éà1: Pod‰∏ÄË¶ßÔºàÊúÄ„ÇÇÂü∫Êú¨ÁöÑ„Å™„ÉÜ„Çπ„ÉàÔºâ
        print("\nüîç Testing Pod API...")
        try:
            pods = v1.list_pod_for_all_namespaces(limit=5)
            print(f"‚úÖ Pod API works - Found {len(pods.items)} pod(s)")

            # PodË©≥Á¥∞„ÇíË°®Á§∫
            for i, pod in enumerate(pods.items):
                print(f"   Pod {i+1}: {pod.metadata.namespace}/{pod.metadata.name} - {pod.status.phase}")

        except Exception as e:
            print(f"‚ùå Pod API failed: {e}")
            return False

        # Êé•Á∂ö„ÉÜ„Çπ„Éà2: Namespace‰∏ÄË¶ß
        print("\nüîç Testing Namespace API...")
        try:
            namespaces = v1.list_namespace()
            print(f"‚úÖ Namespace API works - Found {len(namespaces.items)} namespace(s)")

            for ns in namespaces.items:
                print(f"   Namespace: {ns.metadata.name}")

        except Exception as e:
            print(f"‚ö†Ô∏è  Namespace API failed (may not be implemented in mock): {e}")

        # Êé•Á∂ö„ÉÜ„Çπ„Éà3: Watch API„ÅÆ„ÉÜ„Çπ„Éà
        print("\nüîç Testing Watch API...")
        try:
            from kubernetes import watch
            w = watch.Watch()

            # Áü≠ÊôÇÈñì„Å†„Åëwatch„Çí„ÉÜ„Çπ„Éà
            print("   Starting watch test (5 seconds)...")
            import time
            start_time = time.time()
            event_count = 0

            for event in w.stream(v1.list_pod_for_all_namespaces, timeout_seconds=5):
                event_count += 1
                print(f"   Watch event {event_count}: {event['type']} - {event['object'].metadata.name}")

                # 5ÁßíÁµåÈÅé„Åæ„Åü„ÅØ„Ç§„Éô„É≥„Éà5ÂÄã„ÅßÁµÇ‰∫Ü
                if time.time() - start_time > 5 or event_count >= 5:
                    break

            w.stop()
            print(f"‚úÖ Watch API works - Received {event_count} events")

        except Exception as e:
            print(f"‚ö†Ô∏è  Watch API test failed: {e}")

        print("\nüéâ k8s mock connection test completed!")
        return True

    except Exception as e:
        print(f"‚ùå Connection test failed: {e}")
        print(f"Error type: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return False

def check_kubeconfig():
    """kubeconfig„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç"""
    kubeconfig_path = "./assets/config"

    if not os.path.exists(kubeconfig_path):
        print(f"‚ùå Kubeconfig not found: {kubeconfig_path}")
        return

    try:
        print(f"\nüìÑ Kubeconfig content preview:")
        with open(kubeconfig_path, 'r') as f:
            content = f.read()
            lines = content.split('\n')
            for i, line in enumerate(lines[:20]):  # ÊúÄÂàù„ÅÆ20Ë°å„Å†„ÅëË°®Á§∫
                print(f"   {i+1:2d}: {line}")
            if len(lines) > 20:
                print(f"   ... ({len(lines) - 20} more lines)")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not read kubeconfig: {e}")

if __name__ == "__main__":
    check_kubeconfig()
    test_k8s_mock()
